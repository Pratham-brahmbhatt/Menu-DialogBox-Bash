# Menu-DialogBox-Bash

Hello there! here i made a bash script to create a Menu giving options of Date, Calendar, System Information, Something Interesting and Exit.
Its very easy and fun project. I scored full for doing this in my university.

I created a main file which gives you dialogbox on the terminal in any ubuntu ooperating system. The file should be saved as main.sh and then write chmod u+x main.sh on the terminal to give it executable permission. then ./main.sh to run it.

Here's the code.

#!/bin/bash          
                                                                  
function delete_fl {
while true; do
FILE=$(dialog --stdout \
 --fselect "`pwd`" 20 50 \
 --ok-label 'Delete')
if [ -f "$FILE" ]; then
dialog --yesno "ARE YOU SURE YOU WANT TO DELETE THIS $FILE FILE ?"  5 40
response=$?
     case $response in
     0) ./progress.sh;rm "$FILE"; dialog --msgbox "your file $FILE is deleted" 0 0 ; break ;;
     1) dialog --msgbox "your file $FILE not deleted" 0 0 ;;
     esac
     return
     else
     dialog --msgbox "path doesnt exit" 0 0
     return        
fi
done
}

while true; do                     

MENU=$(dialog --title 'Main Menu'\
  --clear \
  --nocancel \
  --menu "To move [UP/DOWN] arrow keys:" 0 0 6 \
  "1" "Date and Time" \
  "2" "Calendar" \
  "3" "System Configuration" \
  "4" "Delete Files" \
  "5" "Something Interesting" \
  "6" "Exit" 3>&1  1>&2  2>&3)  

case $MENU in
1)
dialog --backtitle "ARCHITECTURE PROJECT" --title "System date and Time" --msgbox "Date is `date`" 5 45;;
2)
dialog --calendar "Select a date" 0 0 ; dialog --title "add a note" --inputbox "type ur text here" 0 0 2>$pro.txt ;;
3)
   ./progress.sh
   ./child.sh;;
4)
delete_fl;;
5)
   ./funn.sh;;
6)
exit;;
esac
done

Create another file named sys.sh for system configufation.

#!/bin/bash          
                                  #started by choosing shell
Configuration() {                              #making a function
     Info=$(dialog --title "System Configuration" --menu "Select options" 15 60 6\
     "1" "Operating System Type" \
     "2" "Computer CPU Information" \
     "3" "Memory Information" \
     "4" "Hard Disk Information" \
     "5" "Mounted File System"  \
     "6" "Quit" 3>&1 1>&2 2>&3)
     case $Info in                              #different cases for checking conditions

     1)
      dialog --backtitle "Architecture project " --title "Operating System " --msgbox "`uname ` " 0 0
       Configuration  
       ;;

     2)
       dialog --title "Computer System Information " --msgbox "`lscpu`" 0 0
      Configuration
      
  
       ;;
 
     3) 
      dialog --title "Memory Information " --msgbox "`grep MemTotal /proc/meminfo`" 0 0
      Configuration
       
      ;;

     4) 
      dialog --title "Hard Disk Information " --msgbox "` sudo fdisk -l `" 0 0
      Configuration
       
      ;;
     
     5) 
      dialog --title "Mounted File System  " --msgbox "` mount  `" 0 0
      Configuration       #going back to this file menu(Info)
         
      ;;

     6)
      
      break   #going back to menu of god file
       
       
      ;;

  
      esac     #end of case 
       
}
Configuration

Create another file fun.sh for something intersting 

#!/bin/bash          
                                                             #started code with putting shell
fun() {                                                      #fun function

     Info=$(dialog --backtitle "JUST FOR FUN" --title "Something Interesting" --menu "Select options" 15 60 5\
     "1" "SEE FORTUNE" \
     "2" "MOVE YOUR EYES" \
     "3" "VIRTUAL COW " \
     "4" "WHO IS SPEAKING"  \
     "5" "Quit" 3>&1 1>&2 2>&3)            #file descriptor for moving or redirecting

     case $Info in                          #checking different conditions
      1)
      dialog --backtitle "JUST FOR FUN " --msgbox "`fortune -s` " 0 0
      fun
       ;;

     2)
       dialog --backtitle "JUST FOR FUN " --msgbox "`xeyes` " 0 0
       fun
     
       ;;
 
     3) 
      dialog --backtitle "JUST FOR FUN " --msgbox "`xcowsay ARCHITECTURE PROJECT ` " 0 0
      fun
       
      ;;

     4) 
      dialog --backtitle "JUST FOR FUN " --msgbox "`espeak " Thank you so much hope you like our project Goodbye "` " 0 0
      fun
      ;;
      5)
      
      break                          #going back to god file
      ;;
      esac                          #end of case
      }
fun

Create another file progress.sh for process bar 

#!/bin/bash
               #started code with choosing shell
for i in $(seq 1 100)      #for loop with variable i and numbers from 1 - 100
do
    sleep 0.01              #time limit 
    echo $i                 #printing the values(numbers)
done | whiptail --gauge 'loading...' 6 60 0  #for dialog gauge box

and that's it here we are done with the project.
